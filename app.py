import streamlit as st
import pandas as pd
import numpy as np
import pickle
import os
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# –ü—É—Ç–∏
CSV_PATH = "boston.csv"
MODEL_PATH = "model_weights.mw"

# –°—Ç–æ–ª–±—Ü—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
COLUMNS = {
    'CRIM': "–£—Ä–æ–≤–µ–Ω—å –ø—Ä–µ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–π–æ–Ω–µ (—á–µ–º –≤—ã—à–µ, —Ç–µ–º —Ö—É–∂–µ)",
    'ZN': "–î–æ–ª—è –∂–∏–ª–æ–π –∑–µ–º–ª–∏ –ø–æ–¥ –±–æ–ª—å—à–∏–µ –¥–æ–º–∞ (>25 —Ç—ã—Å. –∫–≤. —Ñ—É—Ç–æ–≤)",
    'INDUS': "–î–æ–ª—è –∑–µ–º–ª–∏ –ø–æ–¥ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å (—á–µ–º –≤—ã—à–µ, —Ç–µ–º —Ö—É–∂–µ)",
    'CHAS': "–ù–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ä—è–¥–æ–º —Ä–µ–∫–∞ –ß–∞—Ä–ª—å–∑ (1 = –¥–∞, 0 = –Ω–µ—Ç)",
    'NOX': "–£—Ä–æ–≤–µ–Ω—å –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è –≤–æ–∑–¥—É—Ö–∞ (NOx, —á–µ–º –≤—ã—à–µ ‚Äî —Ö—É–∂–µ)",
    'RM': "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –≤ –¥–æ–º–µ (—á–µ–º –±–æ–ª—å—à–µ ‚Äî –¥–æ—Ä–æ–∂–µ)",
    'AGE': "% –¥–æ–º–æ–≤, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–æ 1940 (—Å—Ç–∞—Ä—ã–µ –¥–æ–º–∞)",
    'DIS': "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –¥–µ–ª–æ–≤—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ (–±–ª–∏–∂–µ ‚Äî –¥–æ—Ä–æ–∂–µ)",
    'RAD': "–î–æ—Å—Ç—É–ø –∫ —à–æ—Å—Å–µ (—á–µ–º –±–æ–ª—å—à–µ ‚Äî –≤—ã—à–µ —à—É–º, –Ω–æ –∏ —É–¥–æ–±—Å—Ç–≤–æ)",
    'TAX': "–ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ –∏–º—É—â–µ—Å—Ç–≤–æ (—á–µ–º –≤—ã—à–µ ‚Äî —Ö—É–∂–µ)",
    'PTRATIO': "–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤ –∫ —É—á–∏—Ç–µ–ª—è–º –≤ —à–∫–æ–ª–µ",
    'B': "–ß—ë—Ä–Ω–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ (—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å)",
    'LSTAT': "% –±–µ–¥–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è (—á–µ–º –≤—ã—à–µ ‚Äî –Ω–∏–∂–µ —Ü–µ–Ω–∞)"
}

@st.cache_resource
def train_and_save_model():
    df = pd.read_csv(CSV_PATH)
    X = df[list(COLUMNS.keys())]
    y = df['MEDV']
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42)

    model = RandomForestRegressor()
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    rmse = mean_squared_error(y_test, y_pred) ** 0.5
    with open(MODEL_PATH, "wb") as f:
        pickle.dump(model, f)
    return model, rmse, df

@st.cache_resource
def load_model():
    if not os.path.exists(MODEL_PATH):
        return train_and_save_model()
    else:
        df = pd.read_csv(CSV_PATH)
        with open(MODEL_PATH, "rb") as f:
            model = pickle.load(f)
        return model, None, df

def main():
    st.set_page_config(page_title="üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–º–æ–≤ –≤ –ë–æ—Å—Ç–æ–Ω–µ", layout="wide")

    st.title("üè† –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ–º–∞ –≤ –ë–æ—Å—Ç–æ–Ω–µ")
    st.markdown("–ú–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –¥–æ–º–∞ –≤ $1000 –ø–æ –¥–∞–Ω–Ω—ã–º –æ —Ä–∞–π–æ–Ω–µ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º.")

    model, rmse, df = load_model()

    tab1, tab2 = st.tabs(["üìà –ê–Ω–∞–ª–∏–∑ –∏ –≥—Ä–∞—Ñ–∏–∫–∏", "ü§ñ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã"])

    # üìà –ê–Ω–∞–ª–∏–∑
    with tab1:
        st.header("üîç –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ")

        for key, desc in COLUMNS.items():
            st.markdown(f"**{key}** ‚Äî {desc}")

        st.divider()
        st.subheader("üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

        analysis_options = [
            "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞",
            "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞",
            "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ—Ç —Ü–µ–Ω—ã"
        ]
        selected_analysis = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫:", analysis_options)

        if selected_analysis == "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞":
            fig_corr, ax_corr = plt.subplots(figsize=(10, 8))
            sns.heatmap(df.corr(), annot=True, fmt=".2f", cmap="coolwarm", ax=ax_corr)
            ax_corr.set_title("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ —Ü–µ–Ω—ã")
            st.pyplot(fig_corr)

        elif selected_analysis == "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞":
            selected_feature = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫:", list(COLUMNS.keys()))
            fig_feat, ax_feat = plt.subplots()
            sns.histplot(df[selected_feature], bins=30, kde=True, ax=ax_feat, color="lightblue")
            ax_feat.set_title(f"{selected_feature} ‚Äî {COLUMNS[selected_feature]}")
            st.pyplot(fig_feat)

        elif selected_analysis == "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ—Ç —Ü–µ–Ω—ã":
            selected_feature = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫:", list(COLUMNS.keys()))
            fig_scatter, ax_scatter = plt.subplots()
            sns.scatterplot(data=df, x=selected_feature, y='MEDV', ax=ax_scatter)
            ax_scatter.set_title(f"{selected_feature} vs MEDV (—Ü–µ–Ω–∞ –¥–æ–º–∞)")
            st.pyplot(fig_scatter)

    # ü§ñ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    with tab2:
        st.header("üìä –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–º–∞")
        input_data = {}
        col1, col2, col3 = st.columns(3)

        for i, (key, desc) in enumerate(COLUMNS.items()):
            col = [col1, col2, col3][i % 3]
            min_val = float(df[key].min())
            max_val = float(df[key].max())
            mean_val = float(df[key].mean())
            step = (max_val - min_val) / 100

            if key == 'CHAS':
                input_data[key] = col.selectbox(f"{key} ‚Äî {desc}", [0, 1], index=0)
            else:
                input_data[key] = col.slider(f"{key} ‚Äî {desc}", min_value=min_val, max_value=max_val, value=mean_val, step=step)

        st.divider()

        if st.button("üîç –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É"):
            st.session_state.prediction_result = model.predict(pd.DataFrame([input_data]))[0]
            st.session_state.input_data = input_data

        if "prediction_result" in st.session_state:
            prediction = st.session_state.prediction_result
            input_data = st.session_state.input_data

            st.success(f"üí∞ –û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: **${prediction * 1000:.2f}**")

            # üîÅ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–±—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∞")

            selected_feature = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", list(input_data.keys()))
            selected_value = input_data[selected_feature]

            fig, ax = plt.subplots()
            sns.histplot(df[selected_feature], bins=30, kde=True, ax=ax, color="lightblue")
            ax.axvline(selected_value, color="red", linestyle="--", label="–í–∞—à –≤–≤–æ–¥")
            ax.set_title(f"{selected_feature} ‚Äî {COLUMNS[selected_feature]}")
            ax.legend()
            st.pyplot(fig)


if __name__ == "__main__":
    main()
