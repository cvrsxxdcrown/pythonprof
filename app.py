import streamlit as st
import pandas as pd
import numpy as np
import pickle
import os
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# –ü—É—Ç–∏
CSV_PATH = "boston.csv"
MODEL_PATH = "model_weights.mw"

# –°—Ç–æ–ª–±—Ü—ã
COLUMNS = [
    'CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM',
    'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT'
]


@st.cache_resource
def train_and_save_model():
    df = pd.read_csv(CSV_PATH)
    X = df[COLUMNS]
    y = df['MEDV']
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42)

    model = RandomForestRegressor()
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    rmse = mean_squared_error(y_test, y_pred, squared=False)
    with open(MODEL_PATH, "wb") as f:
        pickle.dump(model, f)
    return model, rmse, df


@st.cache_resource
def load_model():
    if not os.path.exists(MODEL_PATH):
        return train_and_save_model()
    else:
        df = pd.read_csv(CSV_PATH)
        with open(MODEL_PATH, "rb") as f:
            model = pickle.load(f)
        return model, None, df


def main():
    st.set_page_config(page_title="üíµ Boston House Price Prediction", layout="wide")

    st.title("üè† –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ–º–æ–≤ –≤ –ë–æ—Å—Ç–æ–Ω–µ")
    st.markdown("**–ü—Ä–æ—Å—Ç–æ–π ML-–ø—Ä–æ–µ–∫—Ç –Ω–∞ Streamlit —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º–∏ –∏ –≤–≤–æ–¥–æ–º –ø—Ä–∏–∑–Ω–∞–∫–æ–≤**")

    model, rmse, df = load_model()

    # --- –ö–æ–ª–æ–Ω–∫–∏
    tab1, tab2 = st.tabs(["üìà –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "ü§ñ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"])

    # üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    with tab1:
        st.subheader("üéØ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å —Ü–µ–Ω–æ–π")
        corr = df.corr()
        fig, ax = plt.subplots(figsize=(10, 8))
        sns.heatmap(corr, annot=True, fmt=".2f", cmap="coolwarm", ax=ax)
        st.pyplot(fig)

        st.subheader("üíµ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω (MEDV)")
        fig2, ax2 = plt.subplots()
        sns.histplot(df['MEDV'], bins=30, kde=True, ax=ax2, color='skyblue')
        st.pyplot(fig2)

        st.subheader("üìå –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        importances = model.feature_importances_
        imp_df = pd.DataFrame({
            'Feature': COLUMNS,
            'Importance': importances
        }).sort_values(by='Importance', ascending=False)

        fig3, ax3 = plt.subplots()
        sns.barplot(data=imp_df, x='Importance', y='Feature', ax=ax3, palette='viridis')
        st.pyplot(fig3)

    # ü§ñ ML –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    with tab2:
        st.header("üî¢ –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–º–∞")

        input_data = {}
        col1, col2, col3 = st.columns(3)

        with col1:
            input_data['CRIM'] = st.number_input('CRIM (—É—Ä–æ–≤–µ–Ω—å –ø—Ä–µ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)', value=0.1)
            input_data['ZN'] = st.number_input('ZN (–∂–∏–ª—ã–µ –∑–æ–Ω—ã)', value=0.0)
            input_data['INDUS'] = st.number_input('INDUS (–Ω–µ–∂–∏–ª–æ–π –±–∏–∑–Ω–µ—Å)', value=7.0)
            input_data['CHAS'] = st.selectbox('CHAS (–≤–æ–∑–ª–µ —Ä–µ–∫–∏)', [0, 1])
            input_data['NOX'] = st.number_input('NOX (–∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö–∞)', value=0.5)

        with col2:
            input_data['RM'] = st.number_input('RM (—Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç)', value=6.0)
            input_data['AGE'] = st.number_input('AGE (% —Å—Ç–∞—Ä—ã—Ö –¥–æ–º–æ–≤)', value=65.0)
            input_data['DIS'] = st.number_input('DIS (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ä–∞–±–æ—Ç—ã)', value=4.0)
            input_data['RAD'] = st.number_input('RAD (–¥–æ—Å—Ç—É–ø –∫ —à–æ—Å—Å–µ)', value=4)
            input_data['TAX'] = st.number_input('TAX (–Ω–∞–ª–æ–≥–∏)', value=300.0)

        with col3:
            input_data['PTRATIO'] = st.number_input('PTRATIO (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫/—É—á–∏—Ç–µ–ª—å)', value=18.0)
            input_data['B'] = st.number_input('B (–∏–Ω–¥–µ–∫—Å —á–µ—Ä–Ω–æ–∫–æ–∂–∏—Ö)', value=390.0)
            input_data['LSTAT'] = st.number_input('LSTAT (% –±–µ–¥–Ω—ã—Ö)', value=10.0)

        if st.button("üîç –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É"):
            input_df = pd.DataFrame([input_data])
            prediction = model.predict(input_df)[0]
            st.success(f"üí∞ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–º–∞: **${prediction * 1000:.2f}**")


if __name__ == "__main__":
    main()
